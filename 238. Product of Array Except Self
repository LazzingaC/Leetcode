class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        
        #Think Path:
        ### Solution 1(Failed - Time Limit Exeeded): Brute force, 2 traversal. 
        #Time Complexity: O(n^2), 
        #Space Complexity: O(1)
        
        rst = []
        for i in range(len(nums)):
            nums1, prod = nums[:], 1
            nums1.pop(i)
            for temp in nums1:
                prod *= temp
            rst.append(prod)
        return rst
    
        ### Solution 2(Failed - no division to use): Get product of all elements by 1 traversal, + division. 
        #Time Complexity: O(n), 
        #Space Complexity: O(1)
        
        for num in nums:
            prod *= num
        for num in nums:
            rst.append(prod // num)
        return rst
        
        # Note: Please solve it without division and in O(n).
        # Could you solve it with constant space complexity? 
        
        ############################################################################
        ##### Final solution !!!!! #########
        #Solution 3: product of all left elements * product all right elements by 2 traversal. 
        # Time Complexity: O(n), 
        # Space Complexity: O(1)
        
        rst = [1] * len(nums)
        prod = 1
        # left product
        for i in range(len(nums)):
            rst[i] = prod
            prod *= nums[i]
        
        # right product
        prod = 1
        for i in range(len(nums)-1, -1, -1):
            rst[i] *= prod
            prod *= nums[i]
        return rst
        
        # test case
        # rst: [1,2,3,4] -> [1,1,2,6]
        # rst: [1,1,2,6] -> [1*24=24,1*12=12,2*4=8,6*1=6] prod:24*1=24
            
