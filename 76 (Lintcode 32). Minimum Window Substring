Leetcode: 76. Minimum Window Substring (Lintcode: 32. Minimum Window Substring)
Hard

Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).

Example:
Input: S = "ADOBECODEBANC", T = "ABC"
Output: "BANC"

Note:
If there is no such window in S that covers all characters in T, return the empty string "".
If there is such window, you are guaranteed that there will always be only one unique minimum window in S.


#### Solution 1: Sliding window + 2 pointers ####

class Solution:
    def minWindow(self, s: str, t: str) -> str:
        # sliding window + 2 pointers
        # corner case
        if not s or not t: return ''
        
        left = right = matchNum = rstMin = 0
        rstMin = 2 ** 31
        dic = {}
        rst = ''
        count = collections.Counter(t)
        while left <= right and right < len(s):
            char = s[right]
            dic[char] = 1 if char not in dic else dic[char] + 1
            if dic[char] <= count[char]: matchNum += 1
            while matchNum == len(t):
                if rstMin > right - left + 1:
                    rstMin = right - left + 1
                    rst = s[left:right+1]
                dic[s[left]] -= 1
                if dic[s[left]] < count[s[left]]: matchNum -= 1
                left += 1
            right += 1
        return rst
    
    ''' 
    test case
    Input: S = "ADOBECODEBANC", T = "ABC"
    Output: "BANC"
    
    Input: S = "A", T = "A"
    Output: "A"
    
    Input: S = "AAA", T = "AA"
    Output: "AA"
    """
########## Optimize:
#Solution 2: save a dictionary of s
class Solution:
    def minWindow(self, s: str, t: str) -> str:
        # sliding window + 2 pointers
        # corner case
        if not s or not t: return ''
        
        left = right = matchNum = rstMin = 0
        rstMin = 2 ** 31
        rst = ''
        count = collections.Counter(t)
        while left <= right and right < len(s):
            char = s[right]
            count[char] -= 1
            if count[char] >= 0: matchNum += 1
            while matchNum == len(t):
                if rstMin > right - left + 1:
                    rstMin = right - left + 1
                    rst = s[left:right+1]
                count[s[left]] += 1
                if count[s[left]] > 0: matchNum -= 1
                left += 1
            right += 1
        return rst

    
Solution 1:
    Time Complexity: O(n)   n:len(s)
    Space Complexity: O(n)  
Solution 2:
    Time Complexity: O(n)
    Space Complexity: O(m)  m:len(t) 
